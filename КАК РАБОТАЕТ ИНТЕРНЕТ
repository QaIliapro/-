КАК РАБОТАЕТ ИНТЕРНЕТ 
По своей сути, интернет - очень большая сеть компьютеров, которые могут взаимодействовать друг с другом. 
Когда нужно связать между собой два компьютера, вы должны связать их в сеть либо проводным (обычно с помощью кабеля), либо беспроводным способом (например, с помощью WiFi или Bluetooth). Современные компьютеры поддерживают любой из этих способов связи. 
Чтобы послать сообщение какому-то компьютеру, необходимо как-то обратиться к нему, выделить среди других. Поэтому каждый компьютер, подключённый к сети, имеет свой уникальный адрес для связи: этот адрес называют IP-адресом (IP — сокращение для Internet Protocol, протокол интернета). 
Такие адреса отлично подходят для компьютеров, но людям очень сложно их запоминать. Чтобы упростить себе жизнь, мы можем присвоить каждому IP-адресу псевдоним с понятным для человека именем. Такой псевдоним называют доменным именем. Например, google.com — доменное имя, которое является псевдонимом IP-адреса 173.194.121.32. Использование доменного имени — самый простой способ обратиться к компьютеру в интернете. 
  
Когда мы просматриваем Веб с помощью браузера, обычно мы используем доменное имя, чтобы обратиться к веб-сайту. 
 
КАК РАБОТАЕТ ВЕБ 
Компьютеры, подключённые к сети, называются клиентами и серверами. Упрощённая схема того, как они взаимодействуют, может выглядеть следующим образом: 
  
Клиенты являются обычными пользователями, подключёнными к Интернету посредством устройств (например, компьютер подключён к Wi-Fi, или ваш телефон подключён к мобильной сети) и программного обеспечения, доступного на этих устройствах (как правило, браузер, например, Firefox или Chrome). 
Серверы — это компьютеры, которые хранят веб-страницы, сайты или приложения. Когда клиентское устройство пытается получить доступ к веб-странице, копия страницы загружается с сервера на клиентский компьютер для отображения в браузере пользователя. 
Помимо клиента и сервера, мы также должны уделить внимание: 
Интернет-подключение: позволяет отправлять и принимать данные по сети. Оно подобно улице между домом и магазином. 
TCP/IP: Протокол Управления Передачей и Интернет-Протокол являются коммуникационными протоколами, которые определяют, каким образом данные должны передаваться по сети. Они как транспортные средства, которые позволяют сделать заказ, пойти в магазин и купить ваши товары. В нашем примере, это как автомобиль или велосипед (или собственные ноги). 
DNS: Система Доменных Имён напоминает записную книжку для веб-сайтов. Когда мы вводим URL-адрес (адрес сайта) в своём браузере, браузер обращается к DNS, чтобы найти реальный адрес веб-сайта (IP-адрес), прежде чем он сможет его получить. Браузеру необходимо выяснить, на каком сервере живёт сайт, чтобы он смог отправить запрос в нужное место. Это похоже на поиск адреса магазина, чтобы мы могли попасть в него.  
Реальные веб-адреса - неудобные, незапоминающиеся строки, эти строки состоят из чисел, например: 63.245.215.20. Такой набор чисел называется IP-адресом и представляет собой уникальное местоположение в Интернете. Его не очень легко запомнить. Вот поэтому и изобрели DNS. Это специальные сервера, которые связывают веб-адрес, который мы вводим в браузере (например, "google.com"), с реальным IP-адресом сайта. 
HTTP: Протокол Передачи Гипертекста — это протокол, который определяет язык для клиентов и серверов, чтобы общаться друг с другом. Он, как язык, который мы используем, чтобы заказать ваш товар. 
 
 
 
 
ЧТО ЖЕ НА САМОМ ДЕЛЕ ПРОИСХОДИТ? 
Когда мы вводим веб-адрес в свой браузер (например, посещаем магазин): 1. Браузер обращается к DNS серверу и находит реальный адрес сервера, на котором находится сайт (Мы находим адрес магазина). 
2.	Браузер посылает HTTP запрос к серверу, запрашивая его отправить копию сайта для клиента (Мы идём в магазин и заказываете товар). Это сообщение и все остальные данные, передаваемые между клиентом и сервером, передаются по интернет-соединению с использованием протокола TCP/IP. 
3.	Если сервер одобряет запрос клиента, то он отправляет клиенту статус "200 ОК", который означает: "Вы можете посмотреть на этот сайт! Вот он", а затем начинает отправку файлов сайта в браузер в виде небольших порций, называемых пакетными данными (магазин выдаёт вам ваш товар или вам привозят его домой). 
4.	Браузер собирает маленькие куски(пакеты) в полноценный сайт и показывает его нам (товар прибывает к нашей двери). 
КЛИЕНТ-СЕРВЕРНОЕ ВЗАИМОДЕЙСТВИЕ 
это обмен данными между клиентом и сервером. 
  
Веб-приложение – это клиент-серверное приложение, в котором клиентом выступает браузер, а сервером – веб-сервер. 
В основе взаимодействия клиент-сервер лежит принцип того, что такое взаимодействие начинает клиент, сервер лишь отвечает клиенту. Основная часть приложения, как правило, находится на стороне веб-сервера. 
Взаимодействие инициализирует (начинает) клиент (пользователь), который отправляет запросы на сервер (например, делает поиск в google через браузер). Сервер обрабатывает полученные запросы и в соответствии с бизнес-логикой извлекает нужные данные из базы данных, затем формирует ответ и отправлят его обратно клиенту.  
Клиент – это графический интерфейс приложения (например, браузер, мобильное приложение, игра, десктопное приложение, например, Microsoft Outlook).  
Т.к. клиент — это интерфейс, то его разрабатывает frontend программист, в соответствии с макетами, которые предоставил ему дизайнер. 
 
Сервер – это сервер, принимающий HTTP-запросы от клиентов и выдающий им HTTP-ответы. Сервером называют как программное обеспечение, выполняющее функции веб-сервера, так и непосредственно компьютер, на котором это программное обеспечение работает. 
База данных — это система, предназначенная для хранения данных на сервере. Базы данных функционируют под управлением так называемых систем управления базами данных (далее – СУБД). Самыми популярными СУБД являются MySQL, MS SQL Server, PostgreSQL, Oracle. 
Сервер и базы данных разрабатывает backend программист. 
  
HTTP: Протокол Передачи Гипертекста — это протокол, который определяет язык для клиентов и серверов, чтобы общаться друг с другом. 
Как мы поняли HTTP – это язык, с помощью которого взаимодействуют между собой клиент и сервер. Рассмотрим основы данного языка, т.е. из каких составляющих он состоит. 
Для того чтобы клиент взаимодействовал с сервером нам необходимо знать: 
•	URL-адрес — адрес сервера, на который мы шлём запрос (например, google.com); 
•	данные, т.е. то, что мы отправляем на сервер (например, делаем запрос в google "погода в Москве ", отправляем новое сообщение в vk, создаём новый пост в Instagram, загружаем новое видео на YouTube); 
•	метод, т.е. что мы с этими данными хотим сделать (например, запрос данных, когда мы что-то ищем в google, создание новых данных, когда отправляем новое сообщение vk, редактирование данных, когда меняем логин в Instagram, удаление данных, когда удаляем видео с канала YouTube). 
МЕТОДЫ HTTP ПРОТОКОЛА 
GET – получение данных с сервера (например, когда мы что-то ищем в google, листаем ленту в Instagram, смотрим видео на YouTube). (Работаем с имеющимися данными.) 
POST – создать новые данные (например, отправляем сообщение в vk, записали историю в Instagram, добавили комментарий под видео в YouTube). (Создаём новые данные.) 
PUT – обновить данные или создать новые, если таких не существует (например, изменить логин в Instagram, отредактировать отправленное сообщение vk). (Изменяем имеющиеся данные.) 
DELETE – удалить данные (например, удалить пост из Instagram, удалить сообщение vk, удалить видео с канала на YouTube). (Удаляем имеющиеся данные.) 
 
 
ДАННЫЕ 
В зависимости от используемого метода данные от клиента к серверу могут передаваться различными способами.  
Например, при использовании метода GET запрашиваемые данные отправляются на сервер в URL-адресе: 
  
  
 
При использовании методов POST, PUT, DELETE данные отправляются на сервер в теле запроса.  
Т.к. данные, передаваемые методом GET, отправляются в URL-адресе, то они видны всем. Например, мы бы не хотели, чтобы злоумышленники похитили данные профиля в Instagram или данные от банковского аккаунта. Для того чтобы скрыть от посторонних глаз и защитить данные, которые отправляет пользователь в HTTP есть специальное место, в котором эти данные можно передать, это место называется тело запроса.  Обычно, данные передаются в формате JSON. 
JSON представляет собой текстовый формат данных в виде набора пар ключ: значение.  
Ключ – это характеристика или свойство (например, логин, пароль, имя, фамилия, возраст, текст сообщения и т.д.) (Ключи придумывают программисты и они могут их назвать так как им вздумается.)  
Значение – это то, чему эта характеристика равна (например, alex, Qwerty123, Иван, Иванов, 23, привет.)  
  
В данной форме вводятся электронная почта и пароль.  
Ключами будут являться email и password.  Значениями будут выступать введённые в указанные поля данные: 
sramotnik1@mail.ru и Sramota1. 
 
На сервер они отпарятся в виде JSON в следующем формате: 
{ 
 	"email": "sramotnik1@mail.ru", 
"password": "Sramota1" 
} 
JSON начинается с открывающейся фигурной скобки, потом через запятую перечисляются пары ключ – значение (после последней пары запятая не нужна. Все ключи пишутся в двойных кавычках. Значения в зависимости от типа данных могут либо иметь двойные кавычки, либо не иметь.) JSON заканчивается на закрывающуюся фигурную скобку. 
  
 
Для формы регистрации данные, отправляемые на сервер будут передаваться в следующем виде: 
{ 
"email": "ivan_ivanov@mail.ru", 
"firstName": "Иван", 
"lastName": "Иванов", 
"middleName": "Иванович", 
"password": "IvanIvanov1", 
"phoneNumber": "+79876543210" 
} 
 
Основные типы данных 
•	Integer (Int). Целые числа, например, 0, -100, 256, 34900 
•	Float / Doable. Числа с плавающей точкой, например, 0.1, -2.5, 100.25 
•	String. Строки – любое значение, заключенное в двойные кавычки, например, " Привет", "Apple ", "". 
•	Boolean. Логический тип. Выбор из двух значений true или false (т.е. правда или ложи, да или нет). 
•	null. Значение не задано или неизвестно. 
•	Массив. Коллекция значений или просто список. (Например, список учеников в классе ["Ирина Петрова", "Григорий Мишин", "Алиса Тришина", "Михаил Гвоздев", "Мария Астапова"]). 
•	Объект. Коллекция пар типа ключ-значение. Тот же самый JSON. 
(Например, {"name": "Иван", "surname": "Иванов"}). 
СТАТУС КОД 
показывает результат того или иного запроса. 
1ХХ - Информационные (102 Processing - "В обработке". Этот код указывает, что сервер получил запрос и обрабатывает его, но обработка ещё не завершена.) 
2ХХ – Успешные (200 OK – "Успешно". Запрос успешно обработан.) 
3ХХ – Перенаправления (302 Found - "Найдено". Этот код ответа значит, что запрошенный ресурс временно изменён. Например, при переходе на vk.com пользователя 302 статус кодом переведут на страницу vk.com/feed.) 
4ХХ - Клиентские ошибки (404 Not Found – "Не найден". Сервер не может найти запрашиваемый ресурс. Код этого ответа, наверно, самый известный из-за частоты его появления в вебе.) 
5ХХ - Серверные ошибки (500 Internal Server Error - "Внутренняя ошибка сервера". Сервер столкнулся с ситуацией, которую он не знает, как обработать.) 
ЗАГОЛОВКИ HTTP ПРОТОКОЛА 
позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом. 
В HTTP-заголовке содержится не чувствительное к регистру название свойства или характеристику, а затем после (:) непосредственно значение. HTTP-заголовки сопровождают обмен данными по протоколу HTTP. Они могут содержать описание данных и информацию, необходимую для взаимодействия между клиентом и сервером. 
Заголовки могут быть сгруппированы следующим образом: 
— Основные заголовки применяется как к запросам, так и к ответам, но не имеет отношения к данным, передаваемым в теле. 
  
 
Заголовки запроса содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс. 
  
 
 
 
 
Заголовки ответа содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его. 
  
 
 
 
 
Тело запроса содержит информацию, которую передают на сервер, например, данные, которые были введены в форму авторизации. 
  
У метода GET 3 заголовка (основные, запроса, ответа) 
  
 
 
 
У методов POST, PUT, DELETE 4 заголовка (основные, запроса, ответа и тело запроса) 
  
 
 
 
Отличия методов GET от POST 
Данные методом GET передаются в строке запроса (т.е. в URL-адресе). Данные методом POST передаются в теле запроса. 
Отличия методов POST от PUT 
Метод POST всегда создаёт новые данные. Метод PUT проверяет существуют ли уже такие данные, если да, то он обновляет их, если нет, то создаёт новые. (Например, при отправлении сообщений vk используется метод POST и каждый раз создаётся новое сообщение, а методом PUT мы обновляем имеющиеся сообщение, поэтому будет изменено одно и то же сообщение.) Чем отличаются HTTP от HTTPS 
— HTTPS не является отдельным протоколом передачи данных, а представляет собой расширение протокола HTTP с надстройкой шифрования; 
— Передаваемые по протоколу HTTP данные не защищены, HTTPS обеспечивает конфиденциальность информации путем ее шифрования; — HTTP использует порт 80, HTTPS — порт 443. 

